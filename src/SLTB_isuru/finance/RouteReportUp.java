/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SLTB_isuru.finance;

//import SLTB_chamika.employee.*;
//import SLTB_chamika.Class.Employee;
import SLTB_isuru.Class.Finance;
import SLTB_sachin.Temp;
import com.ConnectionMysql.MysqlConnect;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

public class RouteReportUp extends javax.swing.JPanel {

    private static RouteReportUp salariesUp = null;
    private Pattern regexPattern;
    private Matcher regMatcher;

    /**
     * Creates new form ManageEmployeeUp
     */
    public RouteReportUp() {
        initComponents();
    }

    public static RouteReportUp getobj() {
        if (salariesUp == null) {
            salariesUp = new RouteReportUp();
        }
        return salariesUp;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        insert = new javax.swing.JButton();
        search = new javax.swing.JTextField();
        delete = new javax.swing.JButton();
        add1 = new javax.swing.JLabel();
        delete2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        update = new javax.swing.JButton();
        update2 = new javax.swing.JLabel();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1200, 60));

        insert.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        insert.setText("Insert");
        insert.setToolTipText("Insert Record");
        insert.setOpaque(false);
        insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertActionPerformed(evt);
            }
        });

        search.setToolTipText("Search for a Record");
        search.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                searchInputMethodTextChanged(evt);
            }
        });
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        search.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                searchPropertyChange(evt);
            }
        });
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchKeyTyped(evt);
            }
        });

        delete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        delete.setText("Delete");
        delete.setToolTipText("");
        delete.setOpaque(false);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        add1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/eadd.png"))); // NOI18N
        add1.setText("jLabel1");
        add1.setToolTipText("Insert Record");
        add1.setMaximumSize(new java.awt.Dimension(50, 50));
        add1.setMinimumSize(new java.awt.Dimension(50, 50));
        add1.setPreferredSize(new java.awt.Dimension(50, 50));
        add1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                add1MouseClicked(evt);
            }
        });

        delete2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edelete.png"))); // NOI18N
        delete2.setToolTipText("Delete Record");
        delete2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                delete2MouseClicked(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/esearch.png"))); // NOI18N
        jLabel1.setToolTipText("Search for a Record");

        update.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        update.setText("Update");
        update.setToolTipText("Update Record");
        update.setOpaque(false);
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        update2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/eupdate.png"))); // NOI18N
        update2.setToolTipText("Update Record");
        update2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                update2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(add1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(insert, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(delete2, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(update2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(delete2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(search, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(insert, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(add1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(update2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertActionPerformed
        // TODO add your handling code here:
        RouteReport RR = RouteReport.getobj();

        String rdeport = RR.deport.getText();
        String rbusno = RR.busno.getText();
        String rrouteno = RR.routeno.getText();
        String rtarget = RR.target.getText();
        String rsidd = RR.sidd.getText();
        String rsidc = RR.sidc.getText();
        String rseasoncount = RR.seasoncount.getText();
        String rseasonincome = RR.seasonincome.getText();
        String rticketcount = RR.ticketcount.getText();
        String rticketincome = RR.ticketincome.getText();
        String rpseasons = RR.pseasons.getText();
        String rnseasons = RR.nseasons.getText();
        String rmseasons = RR.mseasons.getText();
        String rbonus = RR.bonus.getText();
        String rexpenses1 = RR.expenses1.getText();

        int bonus = Integer.parseInt(rbonus);
        int expens = Integer.parseInt(rexpenses1);
        int sincm = Integer.parseInt(rseasonincome);
        int tincm = Integer.parseInt(rticketincome);

        int tot = sincm + tincm;

        int tot1 = tot - expens - bonus;

        Finance f1 = new Finance();
        String valid = ValidateIncome();
        if (valid.equals("success")) {
            int sn = Integer.parseInt(rtarget);
            int sn1 = Integer.parseInt(rsidd);
            int sn2 = Integer.parseInt(rsidc);
            int sn3 = Integer.parseInt(rseasoncount);
            int sn4 = Integer.parseInt(rseasonincome);
            int sn5 = Integer.parseInt(rticketcount);
            int sn6 = Integer.parseInt(rticketincome);
            int sn7 = Integer.parseInt(rpseasons);
            int sn8 = Integer.parseInt(rnseasons);
            int sn9 = Integer.parseInt(rmseasons);
            int sn10 = Integer.parseInt(rbonus);
            int sn11 = Integer.parseInt(rexpenses1);

            f1.setRdeport(rdeport);
            f1.setRbusno(rbusno);
            f1.setRrouteno(rrouteno);
            f1.setRtarget(sn);
            f1.setRsidd(sn1);
            f1.setRsidc(sn2);
            f1.setRseasoncount(sn3);
            f1.setRseasonincome(sn4);
            f1.setRticketcount(sn5);
            f1.setRticketincome(sn6);
            f1.setRpseasons(sn7);
            f1.setRnseasons(sn8);
            f1.setRmseasons(sn9);
            f1.setRbonus(sn10);
            f1.setRexpenses1(sn11);
            f1.setRtotal(tot);
            f1.setRtotal1(tot1);

            f1.insertRouteReport();
            RR.TableLoad1();
        }

    }//GEN-LAST:event_insertActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed

    private void searchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyTyped
        // TODO add your handling code here:

    }//GEN-LAST:event_searchKeyTyped

    private void searchPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_searchPropertyChange
        // TODO add your handling code here:

    }//GEN-LAST:event_searchPropertyChange

    private void searchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_searchKeyPressed

    private void searchInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_searchInputMethodTextChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_searchInputMethodTextChanged

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
        // TODO add your handling code here:
        Finance f1 = new Finance();
        try {
            /*calling the mysql connection class*/
            Connection conn = MysqlConnect.getDbCon();
            RouteReport SalE = RouteReport.getobj();
            String se = search.getText();

            String query2 = "select count(TID),TID,RideNumber,TargetIncome,BusNumber,Date,Income,Deport from activitydetails where TID='" + se + "' or Date='" + se + "'";
            Statement stmt2 = conn.createStatement();
            ResultSet rs = stmt2.executeQuery(query2);
            String query5 = "select count(TID),DSalaryID,CSalaryID,Bounus,Date,TID from dailybonus where TID='" + se + "' or Date='" + se + "'";
            Statement stmt5 = conn.createStatement();
            ResultSet rs5 = stmt5.executeQuery(query5);
            String query4 = "select count(TID),TID,PaidBonus,ParkingEntryPayment,Total,Date from dailyexpenses where TID='" + se + "' or Date='" + se + "'";
            Statement stmt4 = conn.createStatement();
            ResultSet rs4 = stmt4.executeQuery(query4);
            String query6 = "select count(TID),TID,TicketIncome,TicketQty,SeasonsQty,SeasonsIncome,PassengerSeasonsQty,NormalSeasonsQty,MonksSeasonsQty,TotalIncome,Date from seasonsincome where TID='" + se + "' or Date='" + se + "'";
            Statement stmt6 = conn.createStatement();
            ResultSet rs6 = stmt6.executeQuery(query6);
            while (rs.next() && rs5.next() && rs4.next() && rs6.next()) {
                int count = rs.getInt("count(TID)");
                if (count == 1) {
                    String DEPORT = rs.getString("Deport");
                    SalE.deport.setText(DEPORT);
                    String BNUM = rs.getString("BusNumber");
                    SalE.busno.setText(BNUM);
                    String ID = Integer.toString(rs.getInt("TID"));
                    SalE.routeno.setText(ID);
                    String TRGT = rs.getString("TargetIncome");
                    SalE.target.setText(TRGT);
                    String DSID = rs5.getString("DSalaryID");
                    SalE.sidd.setText(DSID);
                    String CSID = rs5.getString("CSalaryID");
                    SalE.sidc.setText(CSID);
                    String SCNT = rs6.getString("SeasonsQty");
                    SalE.seasoncount.setText(SCNT);
                    String SINC = rs6.getString("SeasonsIncome");
                    SalE.seasonincome.setText(SINC);
                    String TCNT = rs6.getString("TicketQty");
                    SalE.ticketcount.setText(TCNT);
                    String TINC = rs6.getString("TicketIncome");
                    SalE.ticketincome.setText(TINC);
                    String PS = rs6.getString("PassengerSeasonsQty");
                    SalE.pseasons.setText(PS);
                    String NS = rs6.getString("NormalSeasonsQty");
                    SalE.nseasons.setText(NS);
                    String MS = rs6.getString("MonksSeasonsQty");
                    SalE.mseasons.setText(MS);
                    String BONUS = rs4.getString("PaidBonus");
                    SalE.bonus.setText(BONUS);
                    String EX = rs4.getString("ParkingEntryPayment");
                    SalE.expenses1.setText(EX);

                    SalE.TableLoad1();
                } else {
                    String DEPORT = "";
                    SalE.deport.setText(DEPORT);
                    String BNUM = "";
                    SalE.busno.setText(BNUM);
                    String ID = "";
                    SalE.routeno.setText(ID);
                    String TRGT = "";
                    SalE.target.setText(TRGT);
                    String DSID = "";
                    SalE.sidd.setText(DSID);
                    String CSID = "";
                    SalE.sidc.setText(CSID);
                    String SCNT = "";
                    SalE.seasoncount.setText(SCNT);
                    String SINC = "";
                    SalE.seasonincome.setText(SINC);
                    String TCNT = "";
                    SalE.ticketcount.setText(TCNT);
                    String TINC = "";
                    SalE.ticketincome.setText(TINC);
                    String PS = "";
                    SalE.pseasons.setText(PS);
                    String NS = "";
                    SalE.nseasons.setText(NS);
                    String MS = "";
                    SalE.mseasons.setText(MS);
                    String BONUS = "";
                    SalE.bonus.setText(BONUS);
                    String EX = "";
                    SalE.expenses1.setText(EX);
                    SalE.TableLoad1();
                }

            }

        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_searchKeyReleased

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        RouteReport SalE = RouteReport.getobj();
        String se = search.getText();

        Finance f1 = new Finance();
        f1.setSdate(se);
        f1.DeleteRouteReport();
        String DEPORT = "";
        SalE.deport.setText(DEPORT);
        String BNUM = "";
        SalE.busno.setText(BNUM);
        String ID = "";
        SalE.routeno.setText(ID);
        String TRGT = "";
        SalE.target.setText(TRGT);
        String DSID = "";
        SalE.sidd.setText(DSID);
        String CSID = "";
        SalE.sidc.setText(CSID);
        String SCNT = "";
        SalE.seasoncount.setText(SCNT);
        String SINC = "";
        SalE.seasonincome.setText(SINC);
        String TCNT = "";
        SalE.ticketcount.setText(TCNT);
        String TINC = "";
        SalE.ticketincome.setText(TINC);
        String PS = "";
        SalE.pseasons.setText(PS);
        String NS = "";
        SalE.nseasons.setText(NS);
        String MS = "";
        SalE.mseasons.setText(MS);
        String BONUS = "";
        SalE.bonus.setText(BONUS);
        String EX = "";
        SalE.expenses1.setText(EX);
        SalE.TableLoad1();
    }//GEN-LAST:event_deleteActionPerformed

    private void add1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add1MouseClicked


    }//GEN-LAST:event_add1MouseClicked

    private void delete2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_delete2MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_delete2MouseClicked

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        RouteReport RR = RouteReport.getobj();

        String rdeport = RR.deport.getText();
        String rbusno = RR.busno.getText();
        String rrouteno = RR.routeno.getText();
        String rtarget = RR.target.getText();
        String rsidd = RR.sidd.getText();
        String rsidc = RR.sidc.getText();
        String rseasoncount = RR.seasoncount.getText();
        String rseasonincome = RR.seasonincome.getText();
        String rticketcount = RR.ticketcount.getText();
        String rticketincome = RR.ticketincome.getText();
        String rpseasons = RR.pseasons.getText();
        String rnseasons = RR.nseasons.getText();
        String rmseasons = RR.mseasons.getText();
        String rbonus = RR.bonus.getText();
        String rexpenses1 = RR.expenses1.getText();

        int bonus = Integer.parseInt(rbonus);
        int expens = Integer.parseInt(rexpenses1);
        int sincm = Integer.parseInt(rseasonincome);
        int tincm = Integer.parseInt(rticketincome);

        int tot = sincm + tincm;
        int exp = expens + bonus;
        int tot1 = tot - expens - bonus;

        Finance f1 = new Finance();
        String valid = ValidateIncome();
        if (valid.equals("success")) {
            try {
                /*calling the mysql connection class*/
                Connection conn = MysqlConnect.getDbCon();
                RouteReport SalE = RouteReport.getobj();
                String se = search.getText();

                String query2 = "select count(TID),TID,RideNumber,TargetIncome,BusNumber,Date,Income,Deport from activitydetails where TID='" + se + "' or Date='" + se + "'";
                Statement stmt2 = conn.createStatement();
                ResultSet rs = stmt2.executeQuery(query2);
                String query5 = "select count(TID),DSalaryID,CSalaryID,Bounus,Date,TID from dailybonus where TID='" + se + "' or Date='" + se + "'";
                Statement stmt5 = conn.createStatement();
                ResultSet rs5 = stmt5.executeQuery(query5);
                String query4 = "select count(TID),TID,PaidBonus,ParkingEntryPayment,Total,Date from dailyexpenses where TID='" + se + "' or Date='" + se + "'";
                Statement stmt4 = conn.createStatement();
                ResultSet rs4 = stmt4.executeQuery(query4);
                String query6 = "select count(TID),TID,TicketIncome,TicketQty,SeasonsQty,SeasonsIncome,PassengerSeasonsQty,NormalSeasonsQty,MonksSeasonsQty,TotalIncome,Date from seasonsincome where TID='" + se + "' or Date='" + se + "'";
                Statement stmt6 = conn.createStatement();
                ResultSet rs6 = stmt6.executeQuery(query6);
                while (rs.next() && rs5.next() && rs4.next() && rs6.next()) {
                    int count = rs.getInt("count(TID)");
                    if (count == 1) {
                        String query1 = "update activitydetails set TargetIncome ='" + rtarget + "',BusNumber ='" + rbusno + "',Income ='" + tot1 + "',Deport ='" + rdeport + "' where TID='" + se + "'";
                        Statement stmt1 = conn.createStatement();
                        stmt1.executeUpdate(query1);
                        String query3 = "update dailybonus set DSalaryID ='" + rsidd + "',CSalaryID ='" + rsidc + "',Bounus ='" + bonus + "' where TID='" + se + "'";
                        Statement stmt3 = conn.createStatement();
                        stmt3.executeUpdate(query3);
                        String query7 = "update dailyexpenses set PaidBonus ='" + bonus + "',ParkingEntryPayment ='" + expens + "',Total ='" + exp + "' where TID='" + se + "'";
                        Statement stmt7 = conn.createStatement();
                        stmt7.executeUpdate(query7);
                        String query8 = "update seasonsincome set TicketIncome ='" + tincm + "',TicketQty ='" + rticketcount + "',SeasonsQty ='" + rseasoncount + "',SeasonsIncome ='" + sincm + "',PassengerSeasonsQty ='" + rpseasons + "',NormalSeasonsQty ='" + rnseasons + "',MonksSeasonsQty ='" + rmseasons + "',TotalIncome ='" + tot + "' where TID='" + se + "'";
                        Statement stmt8 = conn.createStatement();
                        stmt8.executeUpdate(query8);
                        String DEPORT = "";
                        SalE.deport.setText(DEPORT);
                        String BNUM = "";
                        SalE.busno.setText(BNUM);
                        String ID = "";
                        SalE.routeno.setText(ID);
                        String TRGT = "";
                        SalE.target.setText(TRGT);
                        String DSID = "";
                        SalE.sidd.setText(DSID);
                        String CSID = "";
                        SalE.sidc.setText(CSID);
                        String SCNT = "";
                        SalE.seasoncount.setText(SCNT);
                        String SINC = "";
                        SalE.seasonincome.setText(SINC);
                        String TCNT = "";
                        SalE.ticketcount.setText(TCNT);
                        String TINC = "";
                        SalE.ticketincome.setText(TINC);
                        String PS = "";
                        SalE.pseasons.setText(PS);
                        String NS = "";
                        SalE.nseasons.setText(NS);
                        String MS = "";
                        SalE.mseasons.setText(MS);
                        String BONUS = "";
                        SalE.bonus.setText(BONUS);
                        String EX = "";
                        SalE.expenses1.setText(EX);
                        SalE.TableLoad1();
                    }
                }
            } catch (Exception e) {
                System.err.println(e);
            }
        }
    }//GEN-LAST:event_updateActionPerformed

    private void update2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_update2MouseClicked

    public String ValidateIncome() {

        RouteReport RR = RouteReport.getobj();

        String BNO = RR.busno.getText();
        String RNO = RR.routeno.getText();
        String TRG = RR.target.getText();
        String DI = RR.sidd.getText();
        String CI = RR.sidc.getText();
        String SCNT = RR.seasoncount.getText();
        String SINC = RR.seasonincome.getText();
        String TCNT = RR.ticketcount.getText();
        String TINC = RR.ticketincome.getText();
        String PS = RR.pseasons.getText();
        String NS = RR.nseasons.getText();
        String MS = RR.mseasons.getText();
        String BNS = RR.bonus.getText();
        String EXP = RR.expenses1.getText();

        if (RNO.equals("")) {
            JOptionPane.showMessageDialog(null, "Field cannot be empty!!");
            return "fail";

        } else {
            regexPattern = Pattern.compile("^[0-9]{0,9}$");
            regMatcher = regexPattern.matcher(RNO);
            if (regMatcher.matches()) {

            } else {
                JOptionPane.showMessageDialog(null, "Please use numbers!!");
                return "fail";
            }

            if (TRG.equals("")) {
                JOptionPane.showMessageDialog(null, "Field cannot be empty!!");
                return "fail";

            } else {
                regexPattern = Pattern.compile("^[0-9]{0,9}$");
                regMatcher = regexPattern.matcher(TRG);
                if (regMatcher.matches()) {

                } else {
                    JOptionPane.showMessageDialog(null, "Please use numbers!!");
                    return "fail";
                }
                if (DI.equals("")) {
                    JOptionPane.showMessageDialog(null, "Field cannot be empty!!");
                    return "fail";

                } else {
                    regexPattern = Pattern.compile("^[0-9]{0,9}$");
                    regMatcher = regexPattern.matcher(DI);
                    if (regMatcher.matches()) {

                    } else {
                        JOptionPane.showMessageDialog(null, "Please use numbers!!");
                        return "fail";
                    }
                    if (CI.equals("")) {
                        JOptionPane.showMessageDialog(null, "Field cannot be empty!!");
                        return "fail";

                    } else {
                        regexPattern = Pattern.compile("^[0-9]{0,9}$");
                        regMatcher = regexPattern.matcher(CI);
                        if (regMatcher.matches()) {

                        } else {
                            JOptionPane.showMessageDialog(null, "Please use numbers!!");
                            return "fail";
                        }
                        if (SCNT.equals("")) {
                            JOptionPane.showMessageDialog(null, "Field cannot be empty!!");
                            return "fail";

                        } else {
                            regexPattern = Pattern.compile("^[0-9]{0,9}$");
                            regMatcher = regexPattern.matcher(SCNT);
                            if (regMatcher.matches()) {

                            } else {
                                JOptionPane.showMessageDialog(null, "Please use numbers!!");
                                return "fail";
                            }
                            if (SINC.equals("")) {
                                JOptionPane.showMessageDialog(null, "Field cannot be empty!!");
                                return "fail";

                            } else {
                                regexPattern = Pattern.compile("^[0-9]{0,9}$");
                                regMatcher = regexPattern.matcher(SINC);
                                if (regMatcher.matches()) {

                                } else {
                                    JOptionPane.showMessageDialog(null, "Please use numbers!!");
                                    return "fail";
                                }
                                if (TCNT.equals("")) {
                                    JOptionPane.showMessageDialog(null, "Field cannot be empty!!");
                                    return "fail";

                                } else {
                                    regexPattern = Pattern.compile("^[0-9]{0,9}$");
                                    regMatcher = regexPattern.matcher(TCNT);
                                    if (regMatcher.matches()) {

                                    } else {
                                        JOptionPane.showMessageDialog(null, "Please use numbers!!");
                                        return "fail";
                                    }
                                    if (TINC.equals("")) {
                                        JOptionPane.showMessageDialog(null, "Field cannot be empty!!");
                                        return "fail";

                                    } else {
                                        regexPattern = Pattern.compile("^[0-9]{0,9}$");
                                        regMatcher = regexPattern.matcher(TINC);
                                        if (regMatcher.matches()) {

                                        } else {
                                            JOptionPane.showMessageDialog(null, "Please use numbers!!");
                                            return "fail";
                                        }
                                        if (PS.equals("")) {
                                            JOptionPane.showMessageDialog(null, "Field cannot be empty!!");
                                            return "fail";

                                        } else {
                                            regexPattern = Pattern.compile("^[0-9]{0,9}$");
                                            regMatcher = regexPattern.matcher(PS);
                                            if (regMatcher.matches()) {

                                            } else {
                                                JOptionPane.showMessageDialog(null, "Please use numbers!!");
                                                return "fail";
                                            }
                                            if (NS.equals("")) {
                                                JOptionPane.showMessageDialog(null, "Field cannot be empty!!");
                                                return "fail";

                                            } else {
                                                regexPattern = Pattern.compile("^[0-9]{0,9}$");
                                                regMatcher = regexPattern.matcher(NS);
                                                if (regMatcher.matches()) {

                                                } else {
                                                    JOptionPane.showMessageDialog(null, "Please use numbers!!");
                                                    return "fail";
                                                }
                                                if (MS.equals("")) {
                                                    JOptionPane.showMessageDialog(null, "Field cannot be empty!!");
                                                    return "fail";

                                                } else {
                                                    regexPattern = Pattern.compile("^[0-9]{0,9}$");
                                                    regMatcher = regexPattern.matcher(MS);
                                                    if (regMatcher.matches()) {

                                                    } else {
                                                        JOptionPane.showMessageDialog(null, "Please use numbers!!");
                                                        return "fail";
                                                    }
                                                    if (BNS.equals("")) {
                                                        JOptionPane.showMessageDialog(null, "Field cannot be empty!!");
                                                        return "fail";

                                                    } else {
                                                        regexPattern = Pattern.compile("^[0-9]{0,9}$");
                                                        regMatcher = regexPattern.matcher(BNS);
                                                        if (regMatcher.matches()) {

                                                        } else {
                                                            JOptionPane.showMessageDialog(null, "Please use numbers!!");
                                                            return "fail";
                                                        }
                                                        if (EXP.equals("")) {
                                                            JOptionPane.showMessageDialog(null, "Field cannot be empty!!");
                                                            return "fail";

                                                        } else {
                                                            regexPattern = Pattern.compile("^[0-9]{0,9}$");
                                                            regMatcher = regexPattern.matcher(EXP);
                                                            if (regMatcher.matches()) {

                                                            } else {
                                                                JOptionPane.showMessageDialog(null, "Please use numbers!!");
                                                                return "fail";
                                                            }

                                                            if (regMatcher.matches()) {

                                                            } else {
                                                                JOptionPane.showMessageDialog(null, "Please use numbers!!");
                                                                return "fail";
                                                            }

                                                            if (regMatcher.matches()) {

                                                            } else {
                                                                JOptionPane.showMessageDialog(null, "Please use numbers!!");
                                                                return "fail";
                                                            }

                                                            if (BNO.equals("")) {
                                                                JOptionPane.showMessageDialog(null, "Field cannot be empty!!");
                                                                return "fail";

                                                            } else {
                                                                regexPattern = Pattern.compile("^[A-Z-0-9]{3,7}$");
                                                                regMatcher = regexPattern.matcher(BNO);
                                                                if (regMatcher.matches()) {

                                                                } else {
                                                                    JOptionPane.showMessageDialog(null, "Please use valid format!!");
                                                                    return "fail";
                                                                }

                                                                return "success";
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }

                    }
                }
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel add1;
    private javax.swing.JButton delete;
    private javax.swing.JLabel delete2;
    private javax.swing.JButton insert;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JTextField search;
    private javax.swing.JButton update;
    private javax.swing.JLabel update2;
    // End of variables declaration//GEN-END:variables
}
